#include <stdio.h>
#include <ctype.h>

// Function to find modular inverse of a under modulo m
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) {
            return x;
        }
    }
    return -1;  // In case no modular inverse is found
}

// Function to encrypt the plaintext using Affine Cipher
void affineEncrypt(char* plaintext, int a, int b, int m) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            char base = isupper(plaintext[i]) ? 'A' : 'a';
            plaintext[i] = (char)(((a * (plaintext[i] - base) + b) % m) + base);
        }
    }
}

// Function to decrypt the ciphertext using Affine Cipher
void affineDecrypt(char* ciphertext, int a, int b, int m) {
    int a_inv = modInverse(a, m);  // Find modular inverse of 'a'
    if (a_inv == -1) {
        printf("Modular inverse of 'a' doesn't exist.\n");
        return;
    }

    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            ciphertext[i] = (char)((a_inv * ((ciphertext[i] - base) - b + m) % m) + base);
        }
    }
}

int main() {
    char text[100];
    int a, b;
    const int m = 26; // Size of the alphabet

    // Input plaintext and keys
    printf("Enter the text: ");
    fgets(text, sizeof(text), stdin);

    printf("Enter key a (must be coprime with 26): ");
    scanf("%d", &a);

    printf("Enter key b: ");
    scanf("%d", &b);

    // Encryption
    affineEncrypt(text, a, b, m);
    printf("Encrypted Text: %s\n", text);

    // Decryption
    affineDecrypt(text, a, b, m);
    printf("Decrypted Text: %s\n", text);

    return 0;
}
