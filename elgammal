#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to compute modular exponentiation
long long modExp(long long base, long long exp, long long mod) {
    long long result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

int main() {
    // Step 1: Key generation
    long long p; // Prime number
    printf("Enter a prime number p: ");
    scanf("%lld", &p);

    long long e1; // Generator
    printf("Enter a generator e1 (primitive root of p): ");
    scanf("%lld", &e1);

    // Step 2: User's private key
    long long privateKey; // User's private key
    printf("Enter your private key (a random number less than p): ");
    scanf("%lld", &privateKey);

    // Step 3: Compute public key
    long long publicKey = modExp(e1, privateKey, p);
    printf("Your public key is: %lld\n", publicKey);

    // Step 4: Encryption
    char message[100]; // Message to be encrypted
    printf("Enter a message to encrypt (string): ");
    getchar(); // To consume the newline character left by previous input
    fgets(message, sizeof(message), stdin);
    message[strcspn(message, "\n")] = 0; // Remove the newline character

    // Step 5: Choose a random number k
    long long k; // Random number for encryption
    printf("Enter a random number k (less than p): ");
    scanf("%lld", &k);

    // Step 6: Encrypt each character in the message
    long long c1[100], c2[100]; // Arrays to store ciphertext pairs
    printf("Ciphertext: ");
    for (int i = 0; message[i] != '\0'; i++) {
        long long asciiValue = (long long)message[i]; // Convert character to ASCII
        c1[i] = modExp(e1, k, p); // First part of ciphertext
        c2[i] = (modExp(publicKey, k, p) * asciiValue) % p; // Second part of ciphertext
        printf("(%lld, %lld) ", c1[i], c2[i]); // Print the ciphertext pair
    }
    printf("\n");

    // Step 7: Decryption
    printf("Decrypted message: ");
    for (int i = 0; message[i] != '\0'; i++) {
        long long asciiValue = (c2[i] * modExp(c1[i], p - 1 - privateKey, p)) % p; // Decrypting the ASCII value
        char decryptedChar = (char)asciiValue; // Convert back to character
        printf("%c", decryptedChar); // Print the decrypted character
    }
    printf("\n");

    return 0;
}
