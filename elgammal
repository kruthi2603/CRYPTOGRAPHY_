#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Function to compute power modulo n (a^b mod n)
long long powerMod(long long a, long long b, long long n) {
    long long result = 1;
    a = a % n;

    while (b > 0) {
        if (b % 2 == 1) {
            result = (result * a) % n;
        }
        b = b >> 1;
        a = (a * a) % n;
    }

    return result;
}

// Function to compute gcd (Greatest Common Divisor)
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to compute the modular inverse of a under modulo m
int modInverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1)
        return 0;

    while (a > 1) {
        q = a / m;
        t = m;

        m = a % m;
        a = t;

        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0)
        x1 += m0;

    return x1;
}

// Function to encrypt a message m using El-Gamal
void elGamalEncrypt(int m, int p, int g, int e1, int r, int *c1, int *c2) {
    *c1 = powerMod(g, r, p);  // c1 = g^r mod p
    *c2 = (m * powerMod(e1, r, p)) % p;  // c2 = m * e1^r mod p
}

// Function to decrypt a message (c1, c2) using the private key d
int elGamalDecrypt(int c1, int c2, int p, int d) {
    int c1_d = powerMod(c1, d, p);  // c1^d mod p
    int c1_d_inv = modInverse(c1_d, p);  // Inverse of c1^d mod p
    return (c2 * c1_d_inv) % p;  // m = c2 * (c1^d)^-1 mod p
}

int main() {
    int p, g, d, e1, r, m, c1, c2, decryptedMessage;

    // Input values for p, g, and d (private key)
    printf("Enter prime p: ");
    scanf("%d", &p);
    printf("Enter generator g: ");
    scanf("%d", &g);
    printf("Enter private key d: ");
    scanf("%d", &d);

    // Compute public key e1 = g^d mod p
    e1 = powerMod(g, d, p);

    printf("Public key: e1 = %d\n", e1);

    // Input message to encrypt (as an integer)
    printf("Enter message to encrypt (integer): ");
    scanf("%d", &m);

    // Select random r (ephemeral key) for encryption
    printf("Enter random r (ephemeral key): ");
    scanf("%d", &r);

    // Encrypt the message
    elGamalEncrypt(m, p, g, e1, r, &c1, &c2);
    printf("Ciphertext: c1 = %d, c2 = %d\n", c1, c2);

    // Decrypt the message
    decryptedMessage = elGamalDecrypt(c1, c2, p, d);
    printf("Decrypted message: %d\n", decryptedMessage);

    return 0;
}
