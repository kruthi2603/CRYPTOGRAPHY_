#include <stdio.h>
#include <math.h>

long long int gcd(long long int a, long long int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

// Function to calculate (x^y) % p using iterative method
long long int power(long long int x, long long int y, long long int p) {
    long long int res = 1;
    x = x % p;
    while (y > 0) {
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

// Function to find modulo inverse of a under modulo m
long long int modInverse(long long int e, long long int phi) {
    long long int t = 0, newT = 1;
    long long int r = phi, newR = e;
    while (newR != 0) {
        long long int quotient = r / newR;
        t = t - quotient * newT;
        r = r - quotient * newR;
        long long int temp = t;
        t = newT;
        newT = temp;
        temp = r;
        r = newR;
        newR = temp;
    }
    if (r > 1)
        return -1;  // No modular inverse
    if (t < 0)
        t = t + phi;
    return t;
}

// Encrypt the plaintext message using RSA
long long int encrypt(long long int plaintext, long long int e, long long int n) {
    return power(plaintext, e, n);
}

// Decrypt the ciphertext message using RSA
long long int decrypt(long long int ciphertext, long long int d, long long int n) {
    return power(ciphertext, d, n);
}

int main() {
    // Select two prime numbers p and q
    long long int p = 61; // Small prime number (in a real scenario, pick large primes)
    long long int q = 53; // Small prime number

    long long int n = p * q;  // n = p * q
    long long int phi = (p - 1) * (q - 1);  // phi(n) = (p - 1) * (q - 1)

    // Select e (1 < e < phi(n)) and e must be coprime to phi(n)
    long long int e = 17;  // Commonly used value for e

    // Calculate d (modular inverse of e mod phi(n))
    long long int d = modInverse(e, phi);

    if (d == -1) {
        printf("No modular inverse found, exiting.\n");
        return 1;
    }

    printf("Public key: (e = %lld, n = %lld)\n", e, n);
    printf("Private key: (d = %lld, n = %lld)\n", d, n);

    // Example of encrypting and decrypting a word (converted to numbers)
    // Let's take the word "HELLO" and convert it to numbers (ASCII values)
    char message[] = "HELLO";
    printf("Original message: %s\n", message);
    printf("Encrypted message:\n");

    // Encrypt each character of the message
    for (int i = 0; message[i] != '\0'; i++) {
        long long int plaintext = (long long int)message[i];
        long long int ciphertext = encrypt(plaintext, e, n);
        printf("%c -> %lld\n", message[i], ciphertext);
    }

    // Decrypt each character of the encrypted message
    printf("\nDecrypted message:\n");
    for (int i = 0; message[i] != '\0'; i++) {
        long long int encryptedChar = (long long int)message[i];
        long long int decryptedChar = decrypt(encryptedChar, d, n);
        printf("%c -> %lld\n", message[i], decryptedChar);
    }

    return 0;
}
