#include <stdio.h>
#include <math.h>
#include <stdlib.h>

// Function to compute gcd (Greatest Common Divisor)
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to compute the modular inverse of a under modulo m using Extended Euclidean Algorithm
int modInverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;
    
    if (m == 1)
        return 0;
    
    while (a > 1) {
        q = a / m;
        t = m;
        
        m = a % m;
        a = t;
        
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    
    if (x1 < 0)
        x1 += m0;
    
    return x1;
}

// Function to compute power of a number modulo n (a^b mod n)
long long powerMod(long long a, long long b, long long n) {
    long long result = 1;
    a = a % n;
    
    while (b > 0) {
        if (b % 2 == 1) {
            result = (result * a) % n;
        }
        b = b >> 1;
        a = (a * a) % n;
    }
    
    return result;
}

// Function to encrypt the message using the public key (e, n)
long long encrypt(long long m, int e, int n) {
    return powerMod(m, e, n);
}

// Function to decrypt the message using the private key (d, n)
long long decrypt(long long c, int d, int n) {
    return powerMod(c, d, n);
}

int main() {
    int p, q, n, phi_n, e, d;
    long long m, c;

    // Input two prime numbers p and q
    printf("Enter two prime numbers p and q: ");
    scanf("%d %d", &p, &q);

    // Step 1: Calculate n = p * q
    n = p * q;

    // Step 2: Calculate the totient (phi) of n: phi(n) = (p-1)*(q-1)
    phi_n = (p - 1) * (q - 1);

    // Step 3: Choose e such that 1 < e < phi(n) and gcd(e, phi(n)) = 1
    // Simple approach: Try e = 3, 5, 7 until we find a valid one
    e = 3;
    while (gcd(e, phi_n) != 1) {
        e += 2;
    }

    // Step 4: Calculate d, the modular inverse of e modulo phi(n)
    d = modInverse(e, phi_n);

    // Output the keys
    printf("Public key: (e = %d, n = %d)\n", e, n);
    printf("Private key: (d = %d, n = %d)\n", d, n);

    // Step 5: Encrypt and Decrypt a message
    printf("Enter a message (integer): ");
    scanf("%lld", &m);

    // Encrypt the message using the public key (e, n)
    c = encrypt(m, e, n);
    printf("Encrypted message: %lld\n", c);

    // Decrypt the message using the private key (d, n)
    long long decryptedMessage = decrypt(c, d, n);
    printf("Decrypted message: %lld\n", decryptedMessage);

    return 0;
}
